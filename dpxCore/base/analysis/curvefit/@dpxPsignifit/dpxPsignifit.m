classdef dpxPsignifit < hgsetget        properties (Access=public)        X; % x-values, e.g. coherence        Y; % y-values, e.g. fraction perceived rightward motion        N; % number of repeats per data points        shape; % ['cumulative Gaussian'] |'Weibull' | 'logistic' | 'linear' | 'Gumbel'        nIntervals; % [1] curve will run from 0 to 1 on Y-axis, 2: 0.5-1. See psignifit documentation        nBootstraps; % number of bootstraps [3000]        verbose; % [true] | false    end    properties (SetAccess=private,GetAccess=public)        fit=[];        fitstr=[];    end    methods (Access=public)        function F=dpxPsignifit            F.X=[];            F.Y=[];            F.N=[];            F.shape='cumulative Gaussian';            F.nIntervals=1;            F.nBootstraps=3000;            F.verbose=true;        end        function F=doFit(F)            if F.verbose                v='true';            else                v='false';            end            % 'slope_opt'     'log'            opts = {'shape',F.shape,'runs',num2str(F.nBootstraps) ...                ,'n_intervals',num2str(F.nIntervals),'verbose',v ...                ,'lambda_prior','-g [0, 0.05]' ...                }'; % note the apostrofe to transpose the cell array - this is vital            tab=F.makeTable;            [~,F.fit,F.fitstr] = pfit(tab, opts{:});            F.howToCite;        end        function h=plotdata(F,varargin)            tab=F.makeTable;            h=plotpd(tab,varargin{:});        end        function [hf,he]=plotfit(F,varargin)            if isempty(F.fit)                F=doFit(F);            end            % plot the fitted function            hf=plotpf(F.fit.shape,F.fit.params.est,varargin{:});            hold on            % Plot the error bars            color=get(hf,'Color');            a=F.fit.params.est(1);            le=F.fit.params.lims(1,1)-a;            re=F.fit.params.lims(4,1)-a;            if strcmpi(F.fit.shape,'Weibull')                he=herrorbar(a,F.fit.cuts(3),le,re,'m',.025);                ax=axis;                text(mean(ax([1 2])),.8,num2str(F.fit.params.est(1)),'Color',color);            else                miny=F.fit.params.est(3);                maxy=1-F.fit.params.est(4);                y=F.fit.cuts(2)*(maxy-miny)+miny;                he=herrorbar(a,y,le,re,'m',.025);                ax=axis;                text(mean([a ax(2)]),y,num2str(F.fit.params.est(1)),'Color',color);            end            set(he,'Color',color);        end        function howToCite(F)            dpxDispFancy('dpxPsignifit is simply a wrapper around the Psignifit package');                  disp('* For details on how to cite the creators of Psignifit see:     *');                  disp('* http://bootstrap-software.org/psignifit/faq.php#citing        *');                  disp('*****************************************************************');        end    end    methods (Access=protected)        function tab=makeTable(F)            tab=[F.X(:) F.Y(:) F.N(:)];        end    end    methods % set and get methods        function set.X(F,val)            F.X=val;            F.fit=[]; %#ok<*MCSUP>        end        function set.Y(F,val)            F.Y=val;            F.fit=[];        end        function set.N(F,val)            F.N=val;            F.fit=[];        end        function set.shape(F,val)            shapesList={'cumulative Gaussian ','Weibull ','logistic ','linear ','Gumbel'};            if ~any(strcmpi(val,strtrim(shapesList)))                 error(['Curve shape ' val ' is not a valid option. Valid shapes are: ' shapesList{:} '.'])            end            F.shape=val;        end    endend