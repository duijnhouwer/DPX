function hh = herrorbar(x, y, l,u,symbol,teesize)%HERRORBAR Horizontal Error bar plot.%   HERRORBAR(X,Y,L,R,SYMBOL,TEESIZE) plots the graph of vector X vs. vector Y with%   horizontal error bars specified by the vectors L and R.  L and R contain the%   left and right error ranges for each point in X.  Each error bar%   is L(i) + R(i) long and is drawn a distance of L(i) to the right and R(i)%   to the right the points in (X,Y).  The vectors X,Y,L and R must all be%   the same length.  If X,Y,L and R are matrices then each column%   produces a separate line.%%   HERRORBAR(X,Y,E) or HERRORBAR(Y,E) plots X with error bars [X-E X+E].%   HERRORBAR(...,'LineSpec') uses the color and linestyle specified by%   the string 'LineSpec'.  See PLOT for possibilities.%%   H = HERRORBAR(...) returns a vector of line handles.%%	SYMBOL is the center marker (e.g. 'd'=diamond; '-' is default, see PLOT for options)%	%	TEESIZE is per default 2 percent of the distance between the minimum and the %	maximum y-value. It can be overruled with a single positive double value. Use%	'auto' to explicitly use the default.%%   For example,%      x = 1:10;%      y = sin(x);%      e = std(y)*ones(size(x));%      herrorbar(x,y,e)%   draws symmetric horizontal error bars of unit standard deviation.%%   Also see ERRORBAR% Created after ERRORBAR.M from the MathWorks%   L. Shure 5-17-88, 10-1-91 B.A. Jones 4-5-93%   Copyright (c) 1984-98 by The MathWorks, Inc.%   $Revision: 5.14 $  $Date: 1997/12/02 19:47:51 $% 10 june 2003: Added teesize overrule, jacob duijnhouwerif min(size(x))==1,  npt = length(x);  x = x(:);  y = y(:);    if nargin > 2,        if ~isstr(l),            l = l(:);        end        if nargin > 3            if ~isstr(u)                u = u(:);            end        end    endelse  [npt,n] = size(x);endif nargin == 3    if ~isstr(l)        u = l;        symbol = '-';    else        symbol = l;        l = y;        u = y;        y = x;        [m,n] = size(y);        x(:) = (1:npt)'*ones(1,n);;    endendif nargin == 4    if isstr(u),        symbol = u;        u = l;    else        symbol = '-';    endendif nargin == 2    l = y;    u = y;    y = x;    [m,n] = size(y);    x(:) = (1:npt)'*ones(1,n);;    symbol = '-';endu = abs(u);l = abs(l);if isstr(x) || isstr(y) || isstr(u) || isstr(l)    error('Arguments must be numeric.')endif ~isequal(size(x),size(y)) || ~isequal(size(x),size(l)) || ~isequal(size(x),size(u))  error('The sizes of X, Y, L and U must be the same.');end%determine teesizeif nargin == 6	if strcmp(lower(teesize),'auto')		tee = (max(y(:))-min(y(:)))/100;  % make tee .02 x-distance for error bars	elseif strcmp(class(teesize),'double')		if teesize<0 || length(teesize)>1 || ndims(teesize)>2			error('teesize should be a single positive double');		end		tee = teesize;	else		error('teesize should be `auto` (default) or a single positive double');	endelse	tee = (max(y(:))-min(y(:)))/100;  % make tee .02 x-distance for error barsend% changed from errorbar.mxl = x - l;xr = x + u;ytop = y + tee;ybot = y - tee;n = size(y,2);% end change% Plot graph and barshold_state = ishold;cax = newplot;next = lower(get(cax,'NextPlot'));% build up nan-separated vector for bars% changed from errorbar.mxb = zeros(npt*9,n);xb(1:9:end,:) = xl;xb(2:9:end,:) = xl;xb(3:9:end,:) = NaN;xb(4:9:end,:) = xl;xb(5:9:end,:) = xr;xb(6:9:end,:) = NaN;xb(7:9:end,:) = xr;xb(8:9:end,:) = xr;xb(9:9:end,:) = NaN;yb = zeros(npt*9,n);yb(1:9:end,:) = ytop;yb(2:9:end,:) = ybot;yb(3:9:end,:) = NaN;yb(4:9:end,:) = y;yb(5:9:end,:) = y;yb(6:9:end,:) = NaN;yb(7:9:end,:) = ytop;yb(8:9:end,:) = ybot;yb(9:9:end,:) = NaN;% end change[ls,col,mark,msg] = colstyle(symbol); if ~isempty(msg), error(msg); endsymbol = [ls mark col]; % Use marker only on data partesymbol = ['-' col]; % Make sure bars are solidh = plot(xb,yb,esymbol); hold onh = [h;plot(x,y,symbol)];if ~hold_state, hold off; endif nargout>0, hh = h; end